#lang racket

(define/contract (two-sum nums target)
  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))
  (define table (make-hash))
  (for/last ([i (in-naturals)]
             [num (in-list nums)]
             #:final (hash-has-key? table (- target num)))
    (when (not (hash-has-key? table num))
      (hash-set! table num i))
    (list (hash-ref table (- target num) '()) i))
  )


(two-sum (list 2 7 11 15) 9)
(two-sum (list 3 2 4) 6)
(two-sum (list 3 3) 6)

(define (two-sum-fun nums target)
  (let loop ([table (hash)] [i 0] [num nums])
    (match num
      ['() #f]
      [(cons x xs)
        (define maybe-pos (hash-ref table (- target x) #f))
        (if maybe-pos
          (list maybe-pos i)
          (loop (hash-set table x i) (add1 i) xs))])))

(two-sum-fun (list 2 7 11 15) 9)
(two-sum-fun (list 3 2 4) 6)
(two-sum-fun (list 3 3) 6)